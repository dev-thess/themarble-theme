name: Deploy Theme to Prod using Admin API

on:
  push:
    branches:
      - prod

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check environment
        run: |
          echo "Store domain: $SHOPIFY_STORE_DOMAIN"
          echo "API token exists: ${{ secrets.SHOPIFY_ADMIN_TOKEN != '' }}"
          echo "Github SHA: ${GITHUB_SHA}"
        env:
          SHOPIFY_STORE_DOMAIN: "nk7dke-sj.myshopify.com"

      - name: Zip theme folder
        run: |
          echo "Creating theme zip file..."
          zip -r theme.zip * .[^.]* -x '*.git*' -x '.github/*'
          ls -la theme.zip
          echo "Theme zip size: $(du -h theme.zip | cut -f1)"

          # Check if zip is too large (>20MB may cause issues)
          SIZE_BYTES=$(stat -c%s theme.zip)
          if [ $SIZE_BYTES -gt 20000000 ]; then
            echo "Warning: Theme zip is large ($(du -h theme.zip | cut -f1)). This might cause API timeout issues."
          fi

      - name: Upload theme via Admin API
        env:
          SHOPIFY_ADMIN_TOKEN: ${{ secrets.SHOPIFY_ADMIN_TOKEN }}
          SHOPIFY_STORE_DOMAIN: "nk7dke-sj.myshopify.com"
        run: |
          echo "Uploading theme to Shopify..."

          # Create JSON payload file with proper escaping
          echo '{
            "theme": {
              "name": "CI Deploy - '"${GITHUB_SHA:0:7}"'",
              "role": "unpublished",
              "src": "data:application/zip;base64,'"$(base64 -w 0 theme.zip)"'"
            }
          }' > theme_payload.json

          echo "Payload file created, size: $(du -h theme_payload.json | cut -f1)"

          # Set a longer timeout for curl to handle large files
          echo "Making API request with verbose output..."

          # Save both stdout and stderr to files
          # Use verbose mode and increased timeout
          curl -v -s --max-time 300 -X POST "https://${SHOPIFY_STORE_DOMAIN}/admin/api/2023-10/themes.json" \
            -H "X-Shopify-Access-Token: ${SHOPIFY_ADMIN_TOKEN}" \
            -H "Content-Type: application/json" \
            --data-binary @theme_payload.json -o response.json 2>curl_error.log

          # Check curl exit code
          CURL_STATUS=$?

          echo "Curl exit status: $CURL_STATUS"
          echo "Curl error log:"
          cat curl_error.log

          if [ $CURL_STATUS -ne 0 ]; then
            echo "Curl command failed with status $CURL_STATUS"
            echo "Common curl errors:"
            echo "  6: Couldn't resolve host name"
            echo "  7: Failed to connect"
            echo "  28: Operation timeout"
            echo "See https://curl.se/libcurl/c/libcurl-errors.html for more details"
            exit $CURL_STATUS
          fi

          # Display response for debugging
          echo "API Response:"
          cat response.json

          # Check if response is valid JSON
          if ! jq empty response.json 2>/dev/null; then
            echo "Error: Response is not valid JSON"
            echo "Raw response content:"
            cat response.json
            exit 1
          fi

          # Check for API error in response
          ERROR_MESSAGE=$(jq -r '.errors' response.json 2>/dev/null)
          if [ "$ERROR_MESSAGE" != "null" ] && [ "$ERROR_MESSAGE" != "" ]; then
            echo "Error from Shopify API: $ERROR_MESSAGE"
            exit 1
          fi

          # Extract theme ID and enforce theme role
          THEME_ID=$(jq -r '.theme.id' response.json)

          if [ -n "$THEME_ID" ] && [ "$THEME_ID" != "null" ]; then
            echo "Theme created with ID: $THEME_ID"
            
            # Force theme role to ensure visibility
            echo "Setting theme role to ensure visibility..."
            curl -v -s -X PUT \
              "https://${SHOPIFY_STORE_DOMAIN}/admin/api/2023-10/themes/$THEME_ID.json" \
              -H "X-Shopify-Access-Token: ${SHOPIFY_ADMIN_TOKEN}" \
              -H "Content-Type: application/json" \
              -d '{"theme":{"role":"unpublished"}}' -o role_response.json 2>role_error.log
            
            ROLE_STATUS=$?
            if [ $ROLE_STATUS -ne 0 ]; then
              echo "Failed to set theme role, but theme was created. Status: $ROLE_STATUS"
              cat role_error.log
            fi
            
            echo "✅ Theme deployment complete!"
            echo "Theme should now be visible in your Shopify admin at: https://${SHOPIFY_STORE_DOMAIN}/admin/themes/$THEME_ID"
          else
            echo "❌ Could not extract theme ID from response. Check API permissions."
            echo "Full response:"
            cat response.json
            exit 1
          fi
